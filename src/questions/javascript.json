[
  {
    "level0": [
      [
        {
          "xp": 0,
          "time": 60000,
          "type": "continue",
          "answers": ["continue"],
          "question": "Welcome to **JavaScript!**\n\nJavascript is one of the `most popular` programming languages. \n\nIt's useful for `Websites`, `Process data`, `mobile and desktop apps`, and `games`"
        }
      ],
      [
        {
          "question": "Which is the correct statement?\n\n`1-` JavaScript is only for web apps\n`2-` JavaScript can be used to create interactive web elements\n`3-` JavaScript is not a client-side language",
          "answers": ["2"],
          "time": 60000,
          "tries": 2,
          "premiumTries": 3,
          "xp": 10,
          "type": "answer",
          "correct": "Great job! Now let's take a look at outputs to console"
        }
      ],
      [
        {
          "xp": 0,
          "time": 60000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Output to Console!**\n\nLet’s learn how to output something to a console using the `console.log()` function.\n\n__Looking like this:__\n```js\nconsole.log('Hello World')```"
        }
      ],
      [
        {
          "question": "**True, or false?**\n\nThe `console.log()` is a function in JavaScript which is used to print any kind of variables defined before in it or to just print any message that needs to be displayed.",
          "answers": ["✅"],
          "time": 60000,
          "tries": 2,
          "premiumTries": 3,
          "xp": 2,
          "type": "reaction",
          "correct": "Wow!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 60000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Looking at Data Types:**\n\n`1- Number:` Any number.\n`2- String:` Any grouping of characters on your keyboard (letters, numbers, spaces, symbols, etc.) surrounded by single quotes: ' ... ' or double quotes \" ... \".\n`3- Boolean:` This data type only has two possible values `true` or `false` (without quotes).\n`4- Null:` This data type represents the intentional absence of a value, and is represented by the keyword `null` (without quotes).\n`5- Undefined:` This data type is denoted by the keyword `undefined` (without quotes). It also represents the absence of a value though it has a different use than null.\n`6- Object:` Collections of related data.\n\nWe refer as these datatypes as primitive data types, each of them can only store a single type of data."
        }
      ],
      [
        {
          "xp": 0,
          "time": 60000,
          "type": "continue",
          "answers": ["continue"],
          "question": "Let's ignore the others for now and start with `strings` and `numbers`\n\n```js\nconsole.log('Today is a sunny day'); // includes lowercase and upercase, prints a string\nconsole.log(40); // logged without quotes, logs as a number```"
        }
      ],
      [
        {
          "question": "How can we log the **string** \"hello world\" to console?",
          "answers": [
            "console.log(\"hello world\")",
            "console.log('hello world')",
            "console.log(`hello world`)"
          ],
          "time": 60000,
          "tries": 1,
          "premiumTries": 3,
          "xp": 5,
          "type": "answer",
          "correct": "Good job!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 60000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Comments:**\n\nAs we write our Code, we can write comments in our code that the computer will ignore as our program runs. These comments exist just for us humans.Comments can explain what the code is doing, leave instructions for developers using the code, or add any other useful annotations.\n\n`1- Single Line Comments`\n> comment on a single line using `//`\n```js\nconsole.log('Hello World') //Logs hello world```\n\n`2- Multi-Line Comments`\n> comment on a many lines using `/* */`\n```js\n/*\nconsole.log('Hello World')\n*/\nconsole.log('hello!') //this will log hello! the other will be ignored```"
        }
      ],
      [
        {
          "xp": 0,
          "time": 60000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Variables**\n\nWe have 3 ways to declare variables in JavaScript\n\nThe following are:\n**var**, **let** and **const**\nHere is an quick Example:\n```js\nconst x = 10;```\n```js\nlet y = 5;```\n```js\nvar z = 3;```\n\nVariable **x** is storing **10**, **y** is storing **5** and **z** is storing **3**"
        }
      ],
      [
        {
          "question": "**True, or false?**\n\nIn JavaScript, we can use variables in combination with Algebra (Math)",
          "answers": ["✅"],
          "time": 60000,
          "tries": 2,
          "premiumTries": 5,
          "xp": 10,
          "type": "reaction",
          "correct": "Wow!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 60000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**let in JavaScript**\n\nThe **let** keyword is our best friend in JavaScript, let was introduced back in 2015\nVariables defined with let **cannot** be Redeclared and they have an **Block scope**\n\nHere are some Examples:\n```js\nlet number = 5000```\n```js\nlet favouritenumber = 10```\n\n**Warning!**\nYou cannot declare the **same** Value **2** or **more** times, example:\n```js\nlet x = 5```\n```js\nlet x = 500```"
        }
      ],
      [
        {
          "question": "**True, or false?**\n\nCan we **redeclare** variables with **var**?\n\nExample:\n```js\nvar x = 'Cody is cool!```\n```js\nvar x = 0;```",
          "answers": ["✅"],
          "time": 60000,
          "tries": 2,
          "premiumTries": 5,
          "xp": 8,
          "type": "reaction",
          "correct": "Awesome!"
        }
      ],
      [
        {
          "question": "**Answer with yes or no**\n\nWhen we redeclare variables, can we have the same output?\n\nExample:\n```js\nvar x = 5\n```\n\n```js\nvar y = 5\n```",
          "answers": ["yes"],
          "time": 60000,
          "tries": 2,
          "premiumTries": 3,
          "xp": 5,
          "type": "answer",
          "correct": "Awesome! Good Job :=)"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Block Scope in JavaScript**\n\nBefore 2015, JavaScript only had **Function Scope** and **Global Scope**\nJavaScript introduced two new keywords **let** and **const**\nExample:\n\n```js\n { \nlet a = 100\n }``` a **CANNOT** be used on the outside\n\nWith **var**, you can!\nExample:\n```js\n {  \nvar a = 100\n  }``` a CAN be used on the outside!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Const Variables**\n\nConst **cannot** be reassigned\nJavaScript introduced **const** and **let** at the same time!\n\nExample:\n```js\nconst name;```\n\n```js\nname = 'Dave Brown'``` This would give an Error\n\nGood Example:\n```js\nconst name = 'Dave Brown'``` Thats my name - and it's working!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**When should we use Const?**\n\nAs we know const **cannot** be reassigned\nWe use them when we know, that the Value won't change\nExample:\n\n```js\nconst name = 'Maxime Dark'``` // This probably will not change\n\nMost of the time we use **const** when we declare\n- Functions\n- Objects\n- Arrays"
        }
      ],
      [
        {
          "question": "**Answer with yes or no**\n\nCan I add const to another variable I have already declared?\n\nExample:\n```js\nconst x = 5```\n```js\nx = Its my favourite letter!```",
          "answers": ["no"],
          "time": 60000,
          "tries": 3,
          "premiumTries": 5,
          "xp": 5,
          "type": "answer",
          "correct": "Perfect!"
        }
      ],
      [
        {
          "question": "**Answer with yes or no**\n\nQuick training, could this work within const?\n\nExample:\n```js\nconst name = Davie Brown```\n```js\nnumber = '55500323'```",
          "answers": ["no"],
          "time": 60000,
          "tries": 3,
          "premiumTries": 3,
          "xp": 5,
          "type": "answer",
          "correct": "Double dice, congrats!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Operators?**\n\nJavaScript has many Operators we can use\nWe can assign variables and use Arithmetic Ooperators\n**+** = Addition\n**-** = Subtraction\n** * ** = Multiplication\n**/** = Division\n**++** = Increment\n**--** = Decrement\nExample:\n\n```js\nlet x = 500 + 250``` // Output: 750\n\nThe most used Arithmetic Operators are **+**, **-**, ** *** and **/**"
        }
      ],
      [
        {
          "question": "**True, or false?**\n\nIn JavaScript we can multiply variables\nExample:\n```js\nlet a = b * c```",
          "answers": ["✅"],
          "time": 60000,
          "tries": 2,
          "premiumTries": 2,
          "xp": 10,
          "type": "reaction",
          "correct": "Nice!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Javascript Objects**\nJavaScript has many options to assign simple values\nn```js\nconst car = {type: 'Mercedes', model: 'AMG 500', age: 1995, color: 'black'}```"
        }
      ],
      [
        {
          "question": "**True, or false?**\n\nAssigning Values also can go wrong, is this wrong?\nExample:\n```js\nlet car = 'Fiat', {type: 'Mercedes', model: 'AMG 500', age: '1995', color: 'black'}```",
          "answers": ["✅"],
          "time": 60000,
          "tries": 2,
          "premiumTries": 3,
          "xp": 10,
          "type": "reaction",
          "correct": "Nice!"
        }
      ],
      [
        {
          "question": "**Lets give it a try!**\n\nSetting data types with values: **Integar**\nUse Data type `int` to create variable a with the result of 15 + 25\n\nRemember to use lower case.\n\nHint: ||y = is your value, a int is always a number, without strings ''||",
          "answers": ["a = 40", "a= 40", "a =40", "a=40"],
          "time": 60000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 10,
          "type": "answer",
          "correct": "Easy! Nice : ) "
        }
      ],
      [
        {
          "question": "**Another one!**\n\nSetting data types with values: **string**\nUse Data type `string` to create variable **b** with the result of Apple\n\nRemember to use lower case.\n\nHint: ||y = is your value, a int is always a number, without strings ''||",
          "answers": ["b = 'apple'", "b= 'apple'", "b ='apple'", "b='apple'"],
          "time": 90000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 10,
          "type": "answer",
          "correct": "Awesome!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Javascript Functions**\nJavaScripts function is executed when your Program is calling it (invokes it)\nn```js\nfunction myFirstFunction(a1, a2) {\n  return a1 + a2;\n\n}```\n*The function returns the product of a1 and a2*!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Javascript Functions - Return**\nWhen there is an `return` statement, the Program will stop executing there.\nn```js\nlet z = mySecondFunction(2, 2)\n\nfunction mySecondFunction(a, b) {\n\n  return a * b; // Function returns the Product of a and b\n\n}```\nWhen there is an `return` statement, the Program will stop executing there.\nThe result here is `4`"
        }
      ],
      [
        {
          "question": "**Declare your own Function!**\n\nCheck the last two Examples about Functions\nCreate a function called myfunction and assign two variables called a and b into it\n\nRemember to use lower case variables\n\nHint: ||Your function always starts with the keyword function, + with the following function name -> myfunction(). Inside of your Function, declare two variables||",
          "answers": ["function myfunction(a, b) {", "function myfunction(a, b)", "function myfunction(a,b)", "function myfunction(a , b)"],
          "time": 90000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 10,
          "type": "answer",
          "correct": "Thats right!"
        }
      ],
      [
        {
          "question": "**Returning the function**\n\nNow lets use the keyword **return** to return your declared variables above\nWe will mix this up with some math, your return function should add 5 to 55. Only write the answer without the function!\n\nRemember to use lower case variables\n\nHint: ||Returning a function is very easy, use the keyword return + two numbers to multiply, add or remove etc.||",
          "answers": ["return 5 + 55", "return 5+55", "return 5+ 55", "return 5 +55"],
          "time": 90000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 10,
          "type": "answer",
          "correct": "Congrats, your solution is correct!"
        }
      ],
      [
        {
          "question": "**Revision about JavaScript Objects**\n\nUse keyword `const` and variable **person** with Parenthesis {} and assign firstname (Carl) within a String, a lastname (Book) within a string and age (55) as an Integar (number)\n\nUse lower case letters in your Solution! And spaces for a better overview\nHint: ||const person = {myvaluegoeshere: 'miley', age: 19, more ...} this is used to declare multiple values at once - strings and Ints||",
          "answers": ["const person = {firstname: 'carl', lastname: 'cook', age: 55}", "const person= {firstname: 'carl', lastname: 'book', age: 55}", "const person ={firstname: 'carl', lastname: 'book', age: 55}", "const person={firstname: 'carl', lastname: 'book', age: 55}"],
          "time": 120000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 10,
          "type": "answer",
          "correct": "Perfect! Double dice."
        }
      ],
      [
        {
          "question": "**Revision about JavaScript Objects 2.0**\n\nUse keyword `let` and variable **person** with Parenthesis {} and assign haircolor (Brown), eyecolor (Blue)\n\nUse lower case letters in your Solution! And spaces for a better overview\nHint: ||let person = {myvaluegoeshere: 'Miley', age: 19, more ...} this is used to declare multiple values at once - strings and Ints in a Lower Case Syntax||",
          "answers": ["let person = {haircolor: 'brown', eyecolor: 'blue'}", "let person= {haircolor: 'brown', eyecolor: 'blue'}", "let person ={haircolor: 'brown', eyecolor: 'blue'}", "let person={haircolor: 'brown', eyecolor: 'blue'}"],
          "time": 120000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 10,
          "type": "answer",
          "correct": "Right!"
        }
      ],
      [
        {
          "question": "**Alerting Objects**\n\nExample:\n```js\nconst person = {firstname: 'john', lastname: 'brook'};\n\nalert();```\nUse alert() and inside extract the persons firstname!\n\nHint: ||alert() is our function - now we take the function name (person) + value firstname to return 'john' as the firstname. Use a dot inbetween!||\nHint 2: ||person. + value of persons firstname||",
          "answers": ["alert(person.firstname)"],
          "time": 90000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 10,
          "type": "answer",
          "correct": "Right!"
        }
      ],
      [
        {
          "question": "**Alerting Functions**\nWe have declared a Function before, we now want to alert a Hello for every new User on our Site\nExample:\n\n```js\nfunction greetingUsers() {\n// Here we want to alert a hello within a String\n }```\n\nWhat is the solution to alert the string 'hello' within the Function?\n\nHint: ||alert() will create our Function, Strings are declared with '' + a message of your choice||",
          "answers": ["alert('hello')", "alert ('hello')"],
          "time": 90000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 10,
          "type": "answer",
          "correct": "Right!"
        }
      ],
      [
        {
          "question": "**Build your own Car!**\nCar name: Honda | age: 1993 | color: white | country: Australia | seats: 4\nRemember to use lowercase names etc. + strings if needed. Declare your car with `const car`\nHint: || const car is your entry point, use curly brackets to declare informations such as {name: 'honda', age: 1993, etc...}||",
          "answers": ["const car = {name: 'honda', age: 1993, color: 'white', country: 'australia', seats: 4}", "const car={name: 'honda', age: 1993, color: 'white', country: 'australia', seats: 4}", "const car= {name: 'honda', age: 1993, color: 'white', country: 'australia', seats: 4}", "const car ={name: 'honda', age: 1993, color: 'white', country: 'australia', seats: 4}", "const car={name: 'honda', age: 1993, color: 'white', country: 'australia', seats: 4}"],
          "time": 90000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 20,
          "type": "answer",
          "correct": "Congrats!"
        }
      ],
      [
        {
          "question": "**True, or false?**\n\nJavaScript would throw an Error when we would not use Strings within Objects\nExample:\n```js\nconst myself = {\n  name: Gerald,\n  age: 32\n}```",
          "answers": ["✅"],
          "time": 60000,
          "tries": 2,
          "premiumTries": 2,
          "xp": 5,
          "type": "reaction",
          "correct": "Nice!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Javascript Events**\nJavaScript is used in HTML Pages, JS can **react** on these Events!\nn```js\n<element event='my JavaScript'```\n\nAnother example:\n```js\n<button onClick='document.getElementById('demo').innerHTML = Date()'>What time is it?<button>```\nJavaScript is most of the time several lines long, it is more common to see event attributes calling functions:\n```js\n<button onclick='displayDate()'>The time is?</button>```"
        }
      ]
    ],
    "level1": [
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Javascript String / Lengths**\nGiven a string, either with one quote or two, you can access the length using the built-in **length** property!\nn```js\nlet mytext ='abcdefghijklmnopqrstuvwxyz'\nmytext.length; // will return 26```\nThis is because the Alphabet has 26. Letters, `.length` counts them!"
        }
      ],
      [
        {
          "question": "**Length Property**\nGiven is the variable mynameisjohnparkinson1234567799999\nGo ahead and show us how people could know the length without actually counting it!\nCheck the last exercise if you need help!\n\nHint: || Use the variable name + .length; to show the length!||",
          "answers": ["mynameisjohnparkinson1234567799999.length;"],
          "time": 90000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 20,
          "type": "answer",
          "correct": "Perfect!"
        }
      ],
      [
        {
          "question": "**Length Property 2.0**\nGiven is the variable let mytext = parkeymarakeychickenwingvikingvictory0913\nAgain, go ahead and show us how people could **print** the length of **parkeymarakeychickenwingvikingvictory0913** without actually counting it!\nCheck the last exercises if you need help!\n\nHint: || Use the variable name + .length; to show the length within the console.log()||",
          "answers": ["console.log(parkeymarakeychickenwingvikingvictory0913.length)"],
          "time": 90000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 5,
          "type": "answer",
          "correct": "Good!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Javascript Events**\nJavaScript is used in HTML Pages, JS can **react** on these Events!\nn```js\n<element event='my JavaScript'```\n\nAnother example:\n```js\n<button onClick='document.getElementById('demo').innerHTML = Date()'>What time is it?<button>```\nJavaScript is most of the time several lines long, it is more common to see event attributes calling functions:\n```js\n<button onclick='displayDate()'>The time is?</button>```"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**Breaking Long Code Snippets/Lines**\nEvery Developer knows this feeling, when a line is too long for your Code Editor / Screen. Of course there are some tricks to fix this issue!\nExample 1:```js\ndocument.getElementById('demo').innerHTML ='Hello\nCody!';```\n\nExample 2:```js\ndocument.getElementById('demo').innerHTML = 'Hello' + \n 'Cody!'```\nYou could possibly also use backslashed withing the Strings, the most common and best way is using a backlash + n.\nIf the `n` is marked blue/colored, you are in the next line of Code!"
        }
      ],
      [
        {
          "question": "**True, or false?**\n\nRevision from the last task:\n```js\nmylongvariable = 'John +' Park```\n\n**Logically, can this work?**",
          "answers": ["❌"],
          "time": 90000,
          "tries": 2,
          "premiumTries": 3,
          "xp": 2,
          "type": "reaction",
          "correct": "That's true! Because we did not used any Method to cut off Park!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**String Search!**\nWe have a situation, someone tells us to locate a variable within an Array. The problem is, we dont know how ...\nThat's why JavaScript has the Method `indexOf`!\n\nExample:\n```js\nlet example = 'Please use indexOf to locate the Word **apple**'\nexample.lastIndexOf('apple') // Will return 37```\n\nThat's because the Progam counts the letters + space (beginning from index 0) until the actual word we'd like to locate!\nThere are two more Methods called `indexOf()` & `lastIndexOf()` => this would return `-1` if the Word is not given. "
        }
      ],
      [
        {
          "question": "**String Search 2.0**\nNow go ahead and use the `lastIndexOf()` Method to return the Number for the following Text:\n\n```js\nlet text = 'jamie is living in the united states' // locate **United**```\nWarning: You have to use lowercase letters due to the Discord API restrictions. Would look like this:\nlastindexof()\n\nHint: ||Use the variable name **text** with the **lastIndexOf('word in here')** Method to locate the searched Word!||",
          "answers": ["text.lastindexof('united')"],
          "time": 90000,
          "tries": 5,
          "premiumTries": 10,
          "xp": 5,
          "type": "answer",
          "correct": "Perfect!"
        }
      ],
      [
        {
          "xp": 0,
          "time": 90000,
          "type": "continue",
          "answers": ["continue"],
          "question": "**String Search 3.0**\nWe now want to Search for a specific word within your text, here we are able to use `search` with the given Variable Name!\n\n```js\nlet mytext = 'hello world i love bananas'\nmytext.search('bananas') // Returns 9```\nThat's because we are couting Words + Spaces before the actual searched Word **bananas**\n\nDo you think, **indexOf()** and **search()** are equal?\nBecause they accept the same arguments (parameters) and return the same Value?\n\nThe two methods are **NOT** the same, here are the differences:\n- `search()` cannot take a second start position argument\n- `indexOf()` method cannot take powerful search values (regular expressions)\n\n**You will learn more about regular expressions in a later chapter.**"
        }
      ],
      [
        {
          "question": "**True, or false?**\n\nRevision from the last task:\n```js\nlet myvariable = 'hello mister variable'\nreturn myvariable.indexOf('mister')```\n\n**Logically, can this work?**",
          "answers": ["❌"],
          "time": 90000,
          "tries": 2,
          "premiumTries": 3,
          "xp": 5,
          "type": "reaction",
          "correct": "That's true! Because we cannot use a `return` there!"
        }
      ]
      
    ]
  }
]
